---
title: "Initiatives environnementales post chido"
format: 
  dashboard: 
    orientation: columns
    nav-buttons: [github]
    theme: 
      - spacelab
      - style/custom.scss
---

```{r}
targets::tar_load(winitiatives)
targets::tar_load(bversant)
```

# Cartographie

##  {.sidebar}

<br>

::: center
Bienvenue sur la plateformes des initiatives environnementales post Chido
:::

Naviguez sur cette cartographie afin de trouver les initiatives près de chez vous. Cliquez sur les initiatives afin d'avoir plus d'informations.

```{r}

library(crosstalk)

crosstalk_init <- SharedData$new(winitiatives)

filter_select("type", "Type d'initiative", crosstalk_init, ~type)

```

```{r}
filter_select("statut", "Statut de l'initiative", crosstalk_init, ~statut)
```


Afin de faire recenser votre initiative, merci d'envoyer un mail à l'adresse suivante: contact@fmae.yt ou latufa.msa@fmae.yt

::: {layout="[50,50]"}

[![](images/fmae.png){width=100}](https://www.facebook.com/FMAE976/?locale=fr_FR)

[![](images/prefet.png){width=100}](https://www.mayotte.developpement-durable.gouv.fr/accueil-r1.html)
:::


## Column {width="80%"}

```{r}
#| padding: 0px

pal <- leaflet::colorFactor(pal = c("#5773CCFF", "#FFB900FF"), domain = c("À venir", "Terminé"))

initiative_card <- function(img_type, init_name, init_structure, init_date, init_inscription) {
  # img_type = "EEE.png"
  # init_name = "Arrachage d’EEE"
  # init_structure = "GEPOMAY"
  # init_date = "22/02/25"
  # init_inscription = "https://www.jeveuxaider.gouv.fr/missions-benevolat/66226/benevolat-gepomay"
  card_content <- paste0(
    "<img src='", img_type,"' style='width: 50px; height: 50px;'>",
    "<tr>",
    "<th><b><h3 style='text-align: center;'>", init_name,"</h3></b></th>",
    "<p style='text-align: left; font-size: 15px;'> structure organisatrice: <b>", init_structure, "</b></p>",
    "<p style='text-align: left; font-size: 15px;'> date: <b>", init_date, "</b></p>",
    "<a style='text-align: left'; href= '", init_inscription, "' target='_blank'> inscription ici </a>"
  )
  
  return(card_content)
  
}

leaflet::leaflet(data = crosstalk_init) |>
  leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron, group = "Positron", options = leaflet::providerTileOptions(noWrap = TRUE)) |>
  leaflet::addProviderTiles(leaflet::providers$Esri.WorldImagery, group = "Esri World Imagery", options = leaflet::providerTileOptions(noWrap = TRUE))|>
  leaflet::addLayersControl(
          baseGroups = c("Positron", "Esri World Imagery"),
          position = c("topleft"),
          # overlayGroups = c("Avec Clustering", "Sans Clustering"),
          options = leaflet::layersControlOptions(collapsed = TRUE)
          ) |>
  # leaflet::addCircleMarkers() |>
  leaflet::addCircleMarkers(
          radius = 4,
          color = ~ pal(statut),
          stroke = FALSE,
          fillOpacity = 1,
          #group = "Sans Clustering",
          # clusterOptions = leaflet::markerClusterOptions(),
          popup = ~ initiative_card(image, type_d_action, structure, date_souhaité, inscriptions)
            ) |>
  # leaflet::addCircleMarkers(
  #         radius = 6,
  #         color = ~ pal(statut),
  #         stroke = FALSE,
  #         fillOpacity = 1,
  #         group = "Avec Clustering",
  #         clusterOptions = leaflet::markerClusterOptions(),
  #         popup =  ~initiative_card(image, initiatives, structure, date, inscriptions)
  #         ) |>
  leaflet::addLegend(pal = pal, values = ~statut, opacity = 1, na.label = "Non disponible") |>
  leaflet::fitBounds(45, -12.7, 45.312, -12.95)
  
```
# Infographie

## Colunm 

### Row 

```{r}
action_with_date <- winitiatives[!is.na(winitiatives$statut), ]
```

```{r}
#| component: valuebox
#| title: Initiatives à venir
list(
  icon = "arrow-repeat",
  color = "vb-warning",
  value = length(action_with_date$statut[action_with_date$statut == "À venir"])
)
```


```{r}
#| component: valuebox
#| title: Initiatives terminées
list(
  icon = "check2-circle",
  color = "vb-success",
  value = length(action_with_date$statut[action_with_date$statut == "Terminé"])
)
```

### Row 

```{r}
#| title: Nombre d'actions par bassin versant
#| padding: 0px

winit_geom <- sf::st_as_sf(winitiatives, coords = c("longitude", "latitude"), crs = sf::st_crs(4326))
winit_geom <- sf::st_transform(winit_geom, crs = sf::st_crs(4471))

int <- sf::st_intersects(bversant, winit_geom)

bversant$count_action <- unlist(lapply(int, length))
bversant$count_action <- as.numeric(bversant$count_action)

ggplot2::ggplot() +
    ggplot2::geom_sf(data = bversant, ggplot2::aes(fill = count_action)) +
    paletteer::scale_fill_paletteer_c(
      "pals::kovesi.linear_blue_95_50_c20",
      breaks = range(bversant$count_action),
      labels = c("-", "+")
      ) +
  ggplot2::theme_void() +
  ggplot2::theme(
      legend.title = ggplot2::element_blank()
    )

# plotly::plot_ly(bversant, split = ~ count_action, color = ~ count_action, showlegend = FALSE, hoveron = "fills")

```




## Column 

### Row

```{r}
terminated_actions <- action_with_date[action_with_date$statut == "Terminé", ]
```


```{r}
#| padding: 0px

count_init <- terminated_actions |>
  dplyr::count(type)

count_init$type <- forcats::fct_reorder(count_init$type, count_init$n)

ggplot2::ggplot() +
  ggplot2::geom_col(data = count_init, ggplot2::aes(y = n, x = type), fill = "#288fdb", color = "#288fdb") +
  ggplot2::scale_y_continuous(breaks = 1:max(count_init$n), labels = as.integer) +
  ggplot2::coord_flip() +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    axis.title = ggplot2::element_blank(),
    axis.text.y = ggplot2::element_text(size = 20),
    axis.text.x = ggplot2::element_text(size = 18),
    panel.grid.minor = ggplot2::element_blank(),
    panel.grid.major.y = ggplot2::element_blank()
  )
```
### Row

```{r}
#| padding: 0px

terminated_actions$date <- as.Date(terminated_actions$date, format = "%d/%m/%y")

init_monthly <- terminated_actions |>
  dplyr::mutate(month = lubridate::floor_date(date, "month"))

init_monthly$month <- format.Date(init_monthly$month, format = "%d/%m/%y")
  
monthly_count <- init_monthly |> dplyr::count(month)
monthly_count$month <- as.Date(monthly_count$month, format = "%d/%m/%y")


ggplot2::ggplot() +
  ggplot2::geom_col(data = monthly_count, ggplot2::aes(x = month, y = n), fill = "orange") +
  ggplot2::scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
  ggplot2::scale_y_continuous(breaks = 1:max(monthly_count$n), labels = as.integer) +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    axis.title = ggplot2::element_blank(),
    axis.text.y = ggplot2::element_text(size = 20),
    axis.text.x = ggplot2::element_text(size = 20),
  )

```

